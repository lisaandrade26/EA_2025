---
title: "Distribución Poisson"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r setup, include=FALSE}
library(ggplot2)
library(dplyr)
library(knitr)
library(gridExtra)
library(patchwork)

```

## Introducción

La distribución de Poisson es una de las distribuciones de probabilidad discretas más importantes en estadística y tiene una amplia gama de aplicaciones en diversas disciplinas. Fue desarrollada por el matemático francés Siméon Denis Poisson en 1837 como una extensión del trabajo de Abraham de Moivre sobre la distribución binomial.

Esta distribución es especialmente útil para modelar el **número de eventos que ocurren en un intervalo fijo** de tiempo, espacio, volumen, o cualquier otra unidad de medida, cuando estos eventos:

-   Ocurren de manera **independiente**
-   Tienen una **tasa promedio constante**
-   Es **raro** que ocurran múltiples eventos simultáneamente

### Aplicaciones Comunes

La distribución de Poisson se utiliza frecuentemente para modelar:

-   **Llegadas de clientes** a un banco o restaurante por hora
-   **Llamadas telefónicas** recibidas en un centro de atención por minuto
-   **Defectos de fabricación** en un lote de productos
-   **Accidentes de tráfico** en una intersección por día
-   **Mutaciones genéticas** en una secuencia de ADN
-   **Partículas radioactivas** detectadas por un contador Geiger
-   **Terremotos** en una región geográfica por año

La distribución de Poisson también surge como **aproximación a la distribución binomial** cuando $n$ es grande y $p$ es pequeño, manteniendo $np$ constante.

## Definición

::: {#def-poisson}
Una variable aleatoria $X$ sigue una **distribución de Poisson** con parámetro $\lambda$ si cuenta el número de eventos que ocurren en un intervalo fijo, donde $\lambda$ representa la tasa promedio de ocurrencia de eventos en ese intervalo. La función de masa de probabilidad de la distribución de Poisson está dada por:

$$f(x)= \frac{\lambda^x e^{-\lambda}}{x!}$$

donde:

-   $x = 0, 1, 2, 3, \ldots$ (número entero no negativo de eventos)
-   $\lambda > 0$ (parámetro de tasa)
-   $e \approx 2.71828$ (base del logaritmo natural)

A una variable aleatoria que sigue esta distribución se le denota como $X \sim \text{Poisson}(\lambda)$
:::

## Características

**Parámetros**

La distribución de Poisson tiene un único parámetro:

-   $\lambda$ (lambda): Tasa promedio de eventos por unidad de medida ($\lambda > 0$)

    -   También representa tanto la media como la varianza de la distribución
    -   Es un número real positivo
    -   Sus unidades dependen del contexto (eventos/hora, defectos/lote, etc.)

**Parámetros Estadísticos**

Una característica notable de la distribución de Poisson es que su **media y varianza son iguales**:

Media (Esperanza):

$$E(X) = \lambda$$

Varianza:

$$\text{Var}(X) = \lambda$$

Desviación estándar:

$$\sigma = \sqrt{\lambda}$$

Coeficiente de variación:

$$CV = \frac{\sigma}{\mu} = \frac{\sqrt{\lambda}}{\lambda} = \frac{1}{\sqrt{\lambda}}$$

**Función de Distribución (Probabilidad Acumulada)**

La función de distribución acumulada (CDF) es:

$$F(x) = P(X \leq x) = \sum_{i=0}^{x} \frac{\lambda^i e^{-\lambda}}{i!}$$

Esta suma no tiene una forma cerrada simple, por lo que generalmente se calcula numéricamente o se consulta en tablas estadísticas.

## Ejemplo Básico

Un centro de atención telefónica recibe en promedio 4 llamadas por minuto. Suponiendo que las llamadas siguen un proceso de Poisson, responde las siguientes preguntas:

a)  ¿Cuál es la probabilidad de recibir exactamente 6 llamadas en un minuto?
b)  ¿Cuál es la probabilidad de no recibir ninguna llamada en un minuto?
c)  ¿Cuál es la probabilidad de recibir 3 o menos llamadas en un minuto?

**Identificación del modelo:**

-   Variable: $X$ = número de llamadas por minuto
-   Distribución: $X \sim \text{Poisson}(\lambda = 4)$

```{r ejemplo-basico}
# Parámetro
lambda <- 4

# a) P(X = 6)
prob_6 <- dpois(6, lambda)
cat("a) P(X = 6) =", round(prob_6, 4))

# Verificación manual
prob_6_manual <- (lambda^6 * exp(-lambda)) / factorial(6)
cat("\n   Verificación manual:", round(prob_6_manual, 4))

# b) P(X = 0)
prob_0 <- dpois(0, lambda)
cat("\n\nb) P(X = 0) =", round(prob_0, 4))

# c) P(X ≤ 3)
prob_3_o_menos <- ppois(3, lambda)
cat("\n\nc) P(X ≤ 3) =", round(prob_3_o_menos, 4))

# Verificación manual para c)
prob_3_manual <- sum(dpois(0:3, lambda))
cat("\n   Verificación manual:", round(prob_3_manual, 4))
```

**Interpretación de Resultados**

```{r interpretacion-ejemplo}

cat("a) La probabilidad de recibir exactamente 6 llamadas en un minuto es", 
    round(prob_6, 6), "\n")

cat("b) La probabilidad de no recibir ninguna llamada en un minuto es", 
    round(prob_0 , 6), "\n")

cat("c) La probabilidad de recibir 3 o menos llamadas en un minuto es", 
    round(prob_3_o_menos, 6), "\n\n")

# Estadísticas adicionales
media <- lambda
varianza <- lambda
desv_std <- sqrt(lambda)

cat("Estadísticas de la distribución:\n")
cat("Media:", media, "llamadas por minuto\n")
cat("Varianza:", varianza, "\n")
cat("Desviación estándar:", round(desv_std, 2), "llamadas por minuto\n")
```

**Gráfica de la Distribución del Ejemplo**

```{r grafico-ejemplo, fig.cap="Distribución de Poisson para el ejemplo (λ = 4)"}
# Valores para graficar
k_vals <- 0:12
prob_vals <- dpois(k_vals, lambda)

# Data frame para ggplot
data_ejemplo <- data.frame(k = k_vals, probabilidad = prob_vals)

# Resaltar los valores del ejemplo
data_ejemplo$color <- "Normal"
data_ejemplo$color[data_ejemplo$k == 6] <- "P(X = 6)"
data_ejemplo$color[data_ejemplo$k == 0] <- "P(X = 0)"
data_ejemplo$color[data_ejemplo$k <= 3] <- ifelse(data_ejemplo$color[data_ejemplo$k <= 3] == "Normal", 
                                                 "P(X ≤ 3)", data_ejemplo$color[data_ejemplo$k <= 3])

# Gráfico
ggplot(data_ejemplo, aes(x = k, y = probabilidad, fill = color)) +
  geom_col(alpha = 0.8, width = 0.7) +
  labs(title = "Distribución de Poisson: Llamadas Telefónicas",
       subtitle = "λ = 4 llamadas por minuto",
       x = "Número de llamadas (k)",
       y = "Probabilidad P(X = k)",
       fill = "Casos del ejemplo") +
  theme_minimal() +
  scale_fill_manual(values = c("Normal" = "#BDC3C7", 
                              "P(X = 6)" = "#E74C3C", 
                              "P(X = 0)" = "#3498DB",
                              "P(X ≤ 3)" = "#2ECC71")) +
  scale_x_continuous(breaks = k_vals) +
  theme(legend.position = "bottom")
```

## Comparación: Efecto del Parámetro $\lambda$

El parámetro $\lambda$ controla tanto la **posición central** como la **dispersión** de la distribución de Poisson.

```{r efecto-lambda, fig.cap="Efecto del parámetro λ en la distribución de Poisson"}
# Diferentes valores de lambda
lambda_values <- c(1, 3, 5, 10)

# Rango de k para cada lambda
k_max <- max(lambda_values) + 3 * sqrt(max(lambda_values))
k_vals <- 0:ceiling(k_max)

# Crear data frame para todos los valores
data_lambda <- expand.grid(k = k_vals, lambda = lambda_values)
data_lambda$probabilidad <- dpois(data_lambda$k, data_lambda$lambda)
data_lambda$lambda_label <- paste("λ =", data_lambda$lambda)
data_lambda$lambda_label <- factor(data_lambda$lambda_label, levels = c("λ = 1", "λ = 3", "λ = 5", "λ = 10"))


# Gráfico comparativo
ggplot(data_lambda, aes(x = k, y = probabilidad, fill = lambda_label)) +
  geom_col(alpha = 0.7, position = "identity") +
  facet_wrap(~lambda_label, scales = "free") +
  labs(title = "Efecto del Parámetro λ en la Distribución de Poisson",
       subtitle = "A mayor λ, la distribución se desplaza hacia la derecha y se dispersa más",
       x = "Número de eventos (k)",
       y = "Probabilidad P(X = k)") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(type = "qual", palette = "Set1")
```

**Comparación Superpuesta**

```{r comparacion-superpuesta, fig.cap="Comparación superpuesta de diferentes valores de λ"}
# Limitar k para mejor visualización
k_vals_plot <- 0:20

# Filtrar datos
data_plot <- data_lambda[data_lambda$k <= 20, ]

# Gráfico superpuesto
ggplot(data_plot, aes(x = k, y = probabilidad, color = lambda_label)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  labs(title = "Comparación de Distribuciones de Poisson",
       subtitle = "Diferentes valores del parámetro λ",
       x = "Número de eventos (k)",
       y = "Probabilidad P(X = k)",
       color = "Parámetro λ") +
  theme_minimal() +
  scale_color_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "bottom")
```

**Tabla Comparativa de Parámetros Estadísticos**

```{r tabla-parametros}
# Crear tabla con estadísticas para diferentes lambdas
lambdas_tabla <- c(0.5, 1, 2, 3, 5, 8, 10, 15)

tabla_stats <- data.frame(
  Lambda = lambdas_tabla,
  Media = lambdas_tabla,
  Varianza = lambdas_tabla,
  Desv_Std = sqrt(lambdas_tabla),
  CV = 1/sqrt(lambdas_tabla),
  P_X_eq_0 = dpois(0, lambdas_tabla)
)



kable(tabla_stats, digits = 4,
      caption = "Parámetros estadísticos para diferentes valores de λ",
      col.names = c("λ", "Media", "Varianza", "Desv. Std.", "CV", "P(X=0)"))
```

## Simulación de Valores Poisson y Comparación con la Teórica

Consideremos una simulación con $\lambda = 3.5$ y $n = 15,000$.

```{r simulacion-basica}
# Parámetros para la simulación
lambda <- 3.5
n_sim <- 15000

# Simulación de valores
set.seed(42)
valores_simulados <- rpois(n_sim, lambda)

# Estadísticas de la simulación
media_sim <- mean(valores_simulados)
var_sim <- var(valores_simulados)
sd_sim <- sd(valores_simulados)

# Valores teóricos
media_teorica <- lambda
var_teorica <- lambda
sd_teorica <- sqrt(lambda)

# Tabla comparativa
comparacion <- data.frame(
  Estadística = c("Media", "Varianza", "Desv. Estándar"),
  Teórica = c(media_teorica, var_teorica, sd_teorica),
  Simulada = c(media_sim, var_sim, sd_sim),
  Diferencia = c(abs(media_teorica - media_sim), 
                 abs(var_teorica - var_sim), 
                 abs(sd_teorica - sd_sim)),
  Error_Relativo = c(abs(media_teorica - media_sim)/media_teorica * 100,
                     abs(var_teorica - var_sim)/var_teorica * 100,
                     abs(sd_teorica - sd_sim)/sd_teorica * 100)
)

kable(comparacion, digits = 4, 
      caption = paste("Comparación teórica vs simulada (λ =", lambda, ", n =", format(n_sim, big.mark = ",")),
      col.names = c("Estadística", "Teórica", "Simulada", "Diferencia", "Error Rel. (%)"))
```

**Comparación Gráfica: Simulación vs Teórica**

```{r grafico-comparacion, fig.cap="Comparación entre distribución teórica y simulada de Poisson"}
# Rango de valores para comparar
k_max <- quantile(valores_simulados, 0.99)
k_vals <- 0:k_max

# Probabilidades teóricas
prob_teorica <- dpois(k_vals, lambda)

# Frecuencias relativas de la simulación
freq_tabla <- table(factor(valores_simulados, levels = k_vals))
freq_relativa <- as.numeric(freq_tabla) / n_sim

# Crear data frame para ggplot
data_comp <- data.frame(
  k = rep(k_vals, 2),
  Probabilidad = c(prob_teorica, freq_relativa),
  Tipo = rep(c("Teórica", "Simulada"), each = length(k_vals))
)

# Gráfico de barras comparativo
ggplot(data_comp, aes(x = k, y = Probabilidad, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.7, width = 0.8) +
  scale_x_continuous(breaks = seq(0, k_max, by = 1)) +
  labs(title = "Distribución de Poisson: Teórica vs Simulada",
       subtitle = paste("λ =", lambda, ", n =", format(n_sim, big.mark = ",")),
       x = "Número de eventos (k)",
       y = "Probabilidad / Frecuencia relativa",
       fill = "Distribución") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("Teórica" = "#3498DB", "Simulada" = "#E74C3C")) 
  
```

## Verificación de la Suma de Variables Poisson Independientes

::: {#thm-suma-poisson}
Si $X_1 \sim \text{Poisson}(\lambda_1)$ y $X_2 \sim \text{Poisson}(\lambda_2)$ son independientes, entonces:

$$Y = X_1 + X_2 \sim \text{Poisson}(\lambda_1 + \lambda_2)$$

**Generalización:** Si $X_1, X_2, \ldots, X_n$ son variables Poisson independientes con parámetros $\lambda_1, \lambda_2, \ldots, \lambda_n$, entonces:

$$\sum_{i=1}^n X_i \sim \text{Poisson}\left(\sum_{i=1}^n \lambda_i\right)$$
:::

### Verificación por Simulación: Caso de Dos Variables

```{r suma-dos-poisson}
# Parámetros para las dos variables Poisson
lambda1 <- 2.5
lambda2 <- 4.2
lambda_suma <- lambda1 + lambda2
n_sim_suma <- 12000

set.seed(123)

# Método 1: Generar dos Poisson independientes y sumarlas
X1 <- rpois(n_sim_suma, lambda1)
X2 <- rpois(n_sim_suma, lambda2)
suma_simulada <- X1 + X2

# Método 2: Generar directamente de Poisson(λ₁ + λ₂)
poisson_directa <- rpois(n_sim_suma, lambda_suma)

# Comparar estadísticas
stats_suma <- data.frame(
  Método = c("X₁ + X₂ (Suma)", "Poisson Directa", "Teórico"),
  Media = c(mean(suma_simulada), mean(poisson_directa), lambda_suma),
  Varianza = c(var(suma_simulada), var(poisson_directa), lambda_suma),
  Desv_Std = c(sd(suma_simulada), sd(poisson_directa), sqrt(lambda_suma)),
  Min = c(min(suma_simulada), min(poisson_directa), 0),
  Max = c(max(suma_simulada), max(poisson_directa), NA)
)

kable(stats_suma, digits = 4,
      caption = paste("Verificación suma de Poisson (λ₁ =", lambda1, ", λ₂ =", lambda2, ")"))

# Información adicional
cat("\nPARÁMETROS INDIVIDUALES:\n")
cat("========================\n")
cat("X₁ ~ Poisson(", lambda1, "): E(X₁) =", lambda1, ", Var(X₁) =", lambda1, "\n")
cat("X₂ ~ Poisson(", lambda2, "): E(X₂) =", lambda2, ", Var(X₂) =", lambda2, "\n\n")

cat("SUMA TEÓRICA:\n")
cat("=============\n")
cat("Y = X₁ + X₂ ~ Poisson(", lambda_suma, ")\n")
cat("E[Y] = E(X₁) + E(X₂) =", lambda_suma, "\n")
cat("Var(Y) = Var(X₁) + Var(X₂) =", lambda_suma, " (por independencia)\n")
```

**Comparación Visual de las Distribuciones**

```{r comparacion-visual-suma, fig.cap="Comparación visual: Suma de Poisson vs Poisson directa"}
# Crear data frame para comparación
data_suma_comp <- data.frame(
  valores = c(suma_simulada, poisson_directa),
  metodo = rep(c("X1 + X2", "Poisson(λ1+λ2)"), each = n_sim_suma)
)

# Histogramas superpuestos
ggplot(data_suma_comp, aes(x = valores, fill = metodo)) +
  geom_histogram(alpha = 0.6, binwidth = 1, position = "dodge2", center =0) +
  scale_x_continuous(breaks = seq(0, max(c(suma_simulada, poisson_directa)), by = 1)) +
  labs(title = "Verificación de la Propiedad Aditiva de Poisson",
       subtitle = paste("λ1 =", lambda1, ", λ2 =", lambda2, ", λ1+λ2 =", lambda_suma),
       x = "Número de eventos",
       y = "Frecuencia",
       fill = "Método") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("X1 + X2" = "#3498DB", "Poisson(λ1+λ2)" = "#E74C3C"))
```

### Verificación con Múltiples Variables

```{r suma-multiples, fig.cap="Verificación con suma de múltiples variables Poisson"}
# Suma de 4 variables Poisson independientes
lambdas <- c(1.5, 2.0, 2.5, 3.0)
lambda_total <- sum(lambdas)
n_vars <- length(lambdas)

# Generar las variables individuales
variables_poisson <- matrix(0, nrow = n_sim_suma, ncol = n_vars)
for(i in 1:n_vars) {
  variables_poisson[, i] <- rpois(n_sim_suma, lambdas[i])
}

# Suma de las 4 variables
suma_multiple <- rowSums(variables_poisson)

# Poisson directa con λ total
poisson_multiple_directa <- rpois(n_sim_suma, lambda_total)

# Estadísticas comparativas
cat("VERIFICACIÓN CON", n_vars, "VARIABLES POISSON\n")
cat("λ₁ =", lambdas[1], ", λ₂ =", lambdas[2], ", λ₃ =", lambdas[3], ", λ₄ =", lambdas[4], "\n")
cat("λ_total =", lambda_total, "\n\n")

stats_multiple <- data.frame(
  Distribución = c("Suma de 4 Poisson", "Poisson(λ_total)", "Diferencia"),
  Media = c(mean(suma_multiple), mean(poisson_multiple_directa), 
            abs(mean(suma_multiple) - mean(poisson_multiple_directa))),
  Varianza = c(var(suma_multiple), var(poisson_multiple_directa),
               abs(var(suma_multiple) - var(poisson_multiple_directa)))
)

kable(stats_multiple, digits = 4, 
      caption = "Estadísticas para suma de múltiples variables Poisson")

# Visualización
data_multiple <- data.frame(
  valores = c(suma_multiple, poisson_multiple_directa),
  tipo = rep(c("Suma de 4 Poisson", "Poisson(λ_total)"), each = n_sim_suma)
)

ggplot(data_multiple, aes(x = valores, fill = tipo)) +
  geom_histogram(alpha = 0.6, binwidth = 1, center=0, position = "dodge2") +
  scale_x_continuous(breaks = seq(0, max(c(suma_multiple, poisson_multiple_directa)), by = 1)) +
  labs(title = "Suma de Múltiples Variables Poisson",
       subtitle = paste("λ_total =", lambda_total),
       x = "Número de eventos",
       y = "Frecuencia",
       fill = "Tipo") +
  theme_minimal() +
  scale_fill_manual(values = c("#2ECC71", "#F39C12"))
```

## Teorema Central del Límite con Variables Poisson

**Configuración del Experimento**

Consideremos una variable aleatoria $X \sim \text{Poisson}(\lambda = 3)$. Vamos a generar múltiples muestras de diferentes tamaños y observar cómo se comporta la distribución de la media muestral $\bar{X}$.

**Teoría esperada:** 

- Para muestras de tamaño $n$ de $X \sim \text{Poisson}(\lambda)$ 
- $\bar{X} \sim N\left(\lambda, \frac{\lambda}{n}\right)$ cuando $n$ es grande 
- $E(\bar{X}) = \lambda$ y $\text{Var}(\bar{X}) = \frac{\lambda}{n}$

```{r configuracion-tcl}
# Parámetros del experimento
lambda_tcl <- 3
tamaños_muestra <- c(5, 10, 25, 50, 100)
num_muestras <- 2000

cat("CONFIGURACIÓN DEL EXPERIMENTO\n")
cat("=============================\n")
cat("Distribución original: Poisson(λ =", lambda_tcl, ")\n")
cat("Tamaños de muestra:", paste(tamaños_muestra, collapse = ", "), "\n")
cat("Número de muestras por tamaño:", num_muestras, "\n\n")

cat("Parámetros teóricos de la distribución original:\n")
cat("E[X] =", lambda_tcl, "\n")
cat("Var(X) =", lambda_tcl, "\n")
cat("SD(X) =", round(sqrt(lambda_tcl), 3), "\n")
```

**Generación de Muestras y Cálculo de Medias**

```{r generacion-muestras}
# Función para generar medias muestrales
generar_medias_muestrales <- function(n, num_muestras, lambda) {
  medias <- numeric(num_muestras)
  for(i in 1:num_muestras) {
    muestra <- rpois(n, lambda)
    medias[i] <- mean(muestra)
  }
  return(medias)
}

# Generar medias para cada tamaño de muestra
set.seed(123)
medias_muestrales <- list()

for(i in seq_along(tamaños_muestra)) {
  n <- tamaños_muestra[i]
  medias_muestrales[[i]] <- generar_medias_muestrales(n, num_muestras, lambda_tcl)
  names(medias_muestrales)[i] <- paste("n", n, sep = "_")
}

# Crear data frame para análisis
data_tcl <- do.call(rbind, lapply(seq_along(medias_muestrales), function(i) {
  data.frame(
    media_muestral = medias_muestrales[[i]],
    n = tamaños_muestra[i],
    n_label = paste("n =", tamaños_muestra[i])
  )
}))

data_tcl$n_label <- factor(data_tcl$n_label, levels = c("n = 5", "n = 10", "n = 25", "n = 50", "n = 100"))

cat("Muestras generadas exitosamente.\n")
cat("Total de observaciones:", nrow(data_tcl), "\n")
```

**Verificación de Convergencia de Media y Varianza**

```{r verificacion-convergencia}
# Calcular estadísticas para cada tamaño de muestra
estadisticas_tcl <- data.frame(
  n = tamaños_muestra,
  Media_Observada = sapply(medias_muestrales, mean),
  Media_Teorica = rep(lambda_tcl, length(tamaños_muestra)),
  Var_Observada = sapply(medias_muestrales, var),
  Var_Teorica = lambda_tcl / tamaños_muestra,
  SD_Observada = sapply(medias_muestrales, sd),
  SD_Teorica = sqrt(lambda_tcl / tamaños_muestra)
)

# Calcular errores

estadisticas_tcl <- estadisticas_tcl |> mutate(
  Error_Media = abs(Media_Observada - Media_Teorica),
  Error_Var = abs(Var_Observada - Var_Teorica),
  Error_SD = abs(SD_Observada - SD_Teorica))

kable(estadisticas_tcl, digits = 4,
      caption = "Convergencia de estadísticos de la media muestral",
      col.names = c("n", "Media Obs.", "Media Teór.", "Var. Obs.", "Var. Teór.", 
                   "SD Obs.", "SD Teór.", "Error Media", "Error Var.", "Error SD"))

```

**Visualización de la Convergencia**

```{r visualizacion-convergencia, fig.cap="Distribución de medias muestrales para diferentes tamaños de muestra"}
# Histogramas de las medias muestrales
ggplot(data_tcl, aes(x = media_muestral)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, alpha = 0.7, fill = "#3498DB") +
  geom_vline(xintercept = lambda_tcl, color = "#E74C3C", linetype = "dashed", linewidth = 1) +
  facet_wrap(~n_label, scales = "free_y") +
  labs(title = "Distribución de Medias Muestrales (TCL)",
       subtitle = paste("Distribución original: Poisson(λ =", lambda_tcl, "). Línea roja: media teórica"),
       x = "Media muestral",
       y = "Densidad") +
  theme_minimal()
```

```{r comparacion-con-normal, fig.cap="Comparación con distribución normal teórica"}
# Agregar curvas normales específicas para cada panel
data_tcl_split <- split(data_tcl, data_tcl$n_label)

plots_comparacion <- lapply(names(data_tcl_split), function(label) {
  datos <- data_tcl_split[[label]]
  n_val <- unique(datos$n)
  
  ggplot(datos, aes(x = media_muestral)) +
    geom_histogram(aes(y = after_stat(density)), bins = 25, alpha = 0.6, fill = "#3498DB") +
    stat_function(fun = dnorm, 
                  args = list(mean = lambda_tcl, sd = sqrt(lambda_tcl/n_val)), 
                  color = "#E74C3C", linewidth = 1.2) +
    ggtitle(label) +
    xlab("Media muestral") +
    ylab("Densidad") +
    theme_minimal()
})

# Combinar gráficos
do.call(grid.arrange, c(plots_comparacion, ncol = 3))
```

## Aplicaciones de la Distribución de Poisson

### Gestión de Tráfico de Red

**Contexto:** Una empresa de telecomunicaciones monitorea el tráfico de datos en sus servidores. El número de paquetes de datos que llegan por segundo sigue una distribución de Poisson.

```{r aplicacion-trafico}
# Parámetros del problema
lambda_trafico <- 8.5  # 8.5 paquetes por segundo en promedio

cat("APLICACIÓN 1: TRÁFICO DE RED\n")
cat("============================\n")
cat("Parámetro: λ =", lambda_trafico, "paquetes por segundo\n\n")

# Preguntas típicas
cat("ANÁLISIS DEL TRÁFICO:\n")

# 1. Probabilidad de recibir exactamente 10 paquetes en un segundo
prob_10 <- dpois(10, lambda_trafico)
cat("1. P(X = 10 paquetes) =", round(prob_10, 4), "(", round(prob_10*100, 2), "%)\n")

# 2. Probabilidad de recibir más de 12 paquetes
prob_mas_12 <- 1 - ppois(12, lambda_trafico)
cat("2. P(X > 12 paquetes) =", round(prob_mas_12, 4), "(", round(prob_mas_12*100, 2), "%)\n")

# 3. Número esperado de paquetes en 5 segundos
# En 5 segundos: Y ~ Poisson(5λ)
lambda_5seg <- 5 * lambda_trafico
paquetes_5seg_esperados <- lambda_5seg
cat("3. Paquetes esperados en 5 segundos =", paquetes_5seg_esperados, "\n")

# 4. Probabilidad de sobrecarga (más de 15 paquetes por segundo)
prob_sobrecarga <- 1 - ppois(15, lambda_trafico)
cat("4. P(Sobrecarga) = P(X > 15) =", round(prob_sobrecarga, 4), "\n")

# Simulación para verificar
set.seed(456)
n_sim_trafico <- 10000
sim_paquetes <- rpois(n_sim_trafico, lambda_trafico)

cat("\nVERIFICACIÓN POR SIMULACIÓN (n =", format(n_sim_trafico, big.mark = ","), "):\n")
cat("Media simulada:", round(mean(sim_paquetes), 3), "(teórica:", lambda_trafico, ")\n")
cat("P(X = 10) simulada:", round(mean(sim_paquetes == 10), 4), "(teórica:", round(prob_10, 4), ")\n")
cat("P(X > 15) simulada:", round(mean(sim_paquetes > 15), 4), "(teórica:", round(prob_sobrecarga, 4), ")\n")
```

```{r grafico-trafico, fig.cap="Distribución del tráfico de red y zonas críticas"}
# Visualización del problema de tráfico
k_trafico <- 0:20
prob_trafico <- dpois(k_trafico, lambda_trafico)

data_trafico <- data.frame(
  paquetes = k_trafico,
  probabilidad = prob_trafico
)

# Definir zonas
data_trafico$zona <- case_when(
  data_trafico$paquetes <= 5 ~ "Bajo",
  data_trafico$paquetes <= 12 ~ "Normal", 
  data_trafico$paquetes <= 15 ~ "Alto",
  TRUE ~ "Sobrecarga"
)

ggplot(data_trafico, aes(x = paquetes, y = probabilidad, fill = zona)) +
  geom_col(alpha = 0.8) +
  labs(title = "Distribución del Tráfico de Red por Segundo",
       subtitle = paste("λ =", lambda_trafico, "paquetes/segundo"),
       x = "Número de paquetes",
       y = "Probabilidad",
       fill = "Zona de tráfico") +
  theme_minimal() +
  scale_fill_manual(values = c("Bajo" = "#2ECC71", "Normal" = "#3498DB", 
                              "Alto" = "#F39C12", "Sobrecarga" = "#E74C3C"))
```

### Control de Calidad Industrial

**Contexto:** Una fábrica de semiconductores monitorea defectos en sus productos. El número de defectos por lote sigue una distribución de Poisson.

```{r aplicacion-calidad}
# Parámetros del control de calidad
lambda_defectos <- 2.3  # 2.3 defectos por lote en promedio

cat("APLICACIÓN 2: CONTROL DE CALIDAD\n")
cat("================================\n")
cat("Parámetro: λ =", lambda_defectos, "defectos por lote\n\n")

# Análisis de calidad
cat("ANÁLISIS DE CONTROL DE CALIDAD:\n")

# 1. Probabilidad de lote perfecto (0 defectos)
prob_perfecto <- dpois(0, lambda_defectos)
cat("1. P(Lote perfecto) = P(X = 0) =", round(prob_perfecto, 4), "(", round(prob_perfecto*100, 1), "%)\n")

# 2. Probabilidad de lote aceptable (≤ 3 defectos)
prob_aceptable <- ppois(3, lambda_defectos)
cat("2. P(Lote aceptable) = P(X ≤ 3) =", round(prob_aceptable, 4), "(", round(prob_aceptable*100, 1), "%)\n")

# 3. Probabilidad de rechazo (> 5 defectos)
prob_rechazo <- 1 - ppois(5, lambda_defectos)
cat("3. P(Rechazo) = P(X > 5) =", round(prob_rechazo, 4), "(", round(prob_rechazo*100, 1), "%)\n")

# 4. Análisis económico
costo_defecto <- 50  # $50 por defecto
defectos_esperados <- lambda_defectos
costo_esperado_lote <- defectos_esperados * costo_defecto
cat("4. Costo esperado por defectos por lote: $", costo_esperado_lote, "\n")

# 5. Análisis de múltiples lotes
n_lotes <- 100
lambda_total <- n_lotes * lambda_defectos
cat("5. Defectos esperados en", n_lotes, "lotes:", lambda_total, "\n")

```

```{r simulacion-calidad, fig.cap="Simulación del proceso de control de calidad"}
# Simulación del proceso de control de calidad
set.seed(789)
n_lotes_sim <- 1000
lotes_simulados <- rpois(n_lotes_sim, lambda_defectos)

# Clasificar lotes
clasificacion <- case_when(
  lotes_simulados == 0 ~ "Perfecto",
  lotes_simulados <= 3 ~ "Aceptable",
  lotes_simulados <= 5 ~ "Revisión",
  TRUE ~ "Rechazo"
)

# Crear data frame para visualización
data_calidad <- data.frame(
  defectos = lotes_simulados,
  clasificacion = factor(clasificacion, 
                        levels = c("Perfecto", "Aceptable", "Revisión", "Rechazo"))
)

# Gráfico de la simulación
ggplot(data_calidad, aes(x = defectos, fill = clasificacion)) +
  geom_histogram(bins = 15, alpha = 0.8, position = "stack") +
  labs(title = "Simulación de Control de Calidad",
       subtitle = paste("n =", format(n_lotes_sim, big.mark = ","), "lotes simulados"),
       x = "Número de defectos por lote",
       y = "Frecuencia",
       fill = "Clasificación") +
  theme_minimal() +
  scale_fill_manual(values = c("Perfecto" = "#2ECC71", "Aceptable" = "#3498DB",
                              "Revisión" = "#F39C12", "Rechazo" = "#E74C3C"))

# Tabla de resultados de la simulación
tabla_clasificacion <- table(clasificacion)
prop_clasificacion <- prop.table(tabla_clasificacion)

cat("\nRESULTADOS DE LA SIMULACIÓN:\n")
cat("============================\n")
for(i in 1:length(tabla_clasificacion)) {
  cat(names(tabla_clasificacion)[i], ":", tabla_clasificacion[i], 
      "lotes (", round(prop_clasificacion[i]*100, 1), "%)\n")
}
```

### Epidemiología y Salud Pública

**Contexto:** Un epidemiólogo estudia la incidencia de una enfermedad rara en una población. Los nuevos casos por semana siguen una distribución de Poisson.

```{r}
lambda_casos <- 4.2 


cat("APLICACIÓN 3: EPIDEMIOLOGÍA\n")
cat("===========================\n")
cat("Parámetro: λ =", lambda_casos, "casos nuevos por semana\n\n")

cat("ANÁLISIS EPIDEMIOLÓGICO:\n")

prob_sin_casos <- dpois(0, lambda_casos)
cat("1. P(Semana sin casos) =", round(prob_sin_casos, 4), "(", round(prob_sin_casos*100, 1), "%)\n")

prob_brote <- 1 - ppois(8, lambda_casos)
cat("2. P(Brote) = P(X > 8) =", round(prob_brote, 4), "(", round(prob_brote*100, 1), "%)\n")

casos_mes <- 4 * lambda_casos
cat("3. Casos esperados en un mes:", casos_mes, "\n")

lambda_intervencion <- lambda_casos * 0.7
reduccion_casos_mes <- (lambda_casos - lambda_intervencion) * 4
cat("4. Con intervención (reducción 30%):\n")
cat("   Nuevos casos esperados por semana:", lambda_intervencion, "\n")
cat("   Reducción esperada por mes:", reduccion_casos_mes, "casos\n")

umbral_alerta <- 7
prob_alerta <- 1 - ppois(umbral_alerta - 1, lambda_casos)
cat("5. P(Alerta) = P(X ≥", umbral_alerta, ") =", round(prob_alerta, 4), "\n")
```

```{r}
k_epi <- 0:15
prob_antes <- dpois(k_epi, lambda_casos)
prob_despues <- dpois(k_epi, lambda_intervencion)

data_epi <- data.frame(
  casos = rep(k_epi, 2),
  probabilidad = c(prob_antes, prob_despues),
  escenario = rep(c("Sin intervención", "Con intervención"), each = length(k_epi))
)

ggplot(data_epi, aes(x = casos, y = probabilidad, fill = escenario)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_vline(xintercept = umbral_alerta - 0.5, linetype = "dashed", color = "red") +
  labs(title = "Impacto de Intervención en Salud Pública",
       subtitle = paste("Reducción del 30% en la incidencia (λ:", lambda_casos, "→", lambda_intervencion, ")"),
       x = "Número de casos nuevos por semana",
       y = "Probabilidad",
       fill = "Escenario",
       caption = "Línea roja: umbral de alerta") +
  theme_minimal() +
  scale_fill_manual(values = c("Sin intervención" = "red", "Con intervención" = "green"))
```

## Ejercicios Propuestos

::: {#exr-centro-atencion}
Un centro de atención telefónica recibe llamadas siguiendo una distribución de Poisson con una tasa promedio de 6 llamadas por minuto.

**Preguntas:**

a)  ¿Cuál es la probabilidad de recibir exactamente 4 llamadas en un minuto?

b)  ¿Cuál es la probabilidad de no recibir ninguna llamada en 30 segundos?

c)  ¿Cuál es el número esperado de llamadas en una hora?

d)  ¿Cuál es la probabilidad de recibir entre 8 y 12 llamadas (inclusive) en dos minutos?

```{r}
lambda_minuto <- 6

cat(" Ejercicio de Centro de Atención - Distribución de Poisson\n")
cat("Tasa base: λ =", lambda_minuto, "llamadas por minuto\n\n")

lambda_a <- lambda_minuto
k_a <- 4
prob_a <- dpois(k_a, lambda_a)

cat("a) P(X = 4 llamadas en 1 minuto) [λ = 6]:\n")
cat("   Probabilidad =", round(prob_a, 6), "\n\n")

lambda_b <- lambda_minuto * 0.5
k_b <- 0
prob_b <- dpois(k_b, lambda_b)

cat("b) P(X = 0 llamadas en 30 segundos) [λ =", lambda_b, "]:\n")
cat("   Probabilidad =", round(prob_b, 6), "\n\n")


lambda_c <- lambda_minuto * 60
esperanza_c <- lambda_c

cat("c) Número esperado de llamadas en una hora [λ =", lambda_c, "]:\n")
cat("   Llamadas esperadas =", esperanza_c, "\n\n")

lambda_d <- lambda_minuto * 2
k_valores_d <- 8:12


prob_d <- sum(dpois(k_valores_d, lambda_d))

prob_d_alt <- ppois(12, lambda_d) - ppois(7, lambda_d)

cat("d) P(8 <= X <= 12 llamadas en 2 minutos) [λ =", lambda_d, "]:\n")
cat("   Probabilidad (sumando dpois):", round(prob_d, 6), "\n")
cat("   Verificación (usando ppois):", round(prob_d_alt, 6), "\n")

```

:::

::: {#exr-linea_prod}
Una línea de producción tiene en promedio 1.5 defectos por cada 100 productos fabricados.

**Preguntas:**

a)  Si se fabrican 500 productos, ¿cuál es la probabilidad de tener exactamente 8 defectos?

b)  ¿Cuál es la probabilidad de tener 10 o más defectos en 500 productos?

c)  ¿Cuántos productos se deben fabricar para que la probabilidad de tener al menos un defecto sea de 0.95?

d)  Si la empresa mejora el proceso y reduce los defectos a 1.2 por cada 100 productos, ¿cuál sería la nueva probabilidad de tener 10 o más defectos en 500 productos?

```{r}
lambda_100 <- 1.5

cat("Ejercicio de Línea de Producción - Distribución de Poisson \n")
cat("Tasa base: λ =", lambda_100, "defectos por 100 productos\n\n")

lambda_500 <- lambda_100 * (500 / 100)
k_a <- 8
prob_a <- dpois(k_a, lambda_500)

cat("a) P(X = 8 defectos en 500 productos) [λ =", lambda_500, "]:\n")
cat("   Probabilidad =", round(prob_a, 6), "\n\n")

k_b <- 9 # Límite para la función acumulada
prob_b <- 1 - ppois(k_b, lambda_500)

cat("b) P(X >= 10 defectos en 500 productos) [λ =", lambda_500, "]:\n")
cat("   Probabilidad =", round(prob_b, 6), "\n\n")

lambda_N <- -log(0.05)


lambda_1 <- lambda_100 / 100
N_productos <- lambda_N / lambda_1

cat("c) Número de productos para que P(Y >= 1) = 0.95:\n")
cat("   Lambda necesario (λ_N):", round(lambda_N, 4), "\n")
cat("   Número de productos (N):", round(N_productos), "\n\n")

lambda_100_nuevo <- 1.2
lambda_500_nuevo <- lambda_100_nuevo * (500 / 100)
k_d <- 9
prob_d <- 1 - ppois(k_d, lambda_500_nuevo)

cat("d) Nueva probabilidad de P(Z >= 10 defectos en 500 productos) [λ_nuevo =", lambda_500_nuevo, "]:\n")
cat("   Probabilidad =", round(prob_d, 6), "\n")

```


:::

::: {#exr-hospital}
El servicio de urgencias de un hospital recibe pacientes según un proceso de Poisson con una tasa promedio de 2.5 pacientes por hora durante la noche.

**Preguntas:**

a)  ¿Cuál es la probabilidad de que lleguen exactamente 3 pacientes en una hora?

b)  ¿Cuál es la probabilidad de que no llegue ningún paciente en 2 horas consecutivas?

c)  El hospital tiene capacidad para atender 8 pacientes por turno de 4 horas. ¿Cuál es la probabilidad de superar esta capacidad?

d)  ¿Cuál debería ser la capacidad mínima para que la probabilidad de saturación sea menor al 10% en un turno de 4 horas?

```{r}
lambda_hora <- 2.5

cat("Ejercicio de Urgencias del Hospital - Distribución de Poisson\n")
cat("Tasa base: λ =", lambda_hora, "pacientes por hora\n\n")

lambda_a <- lambda_hora
k_a <- 3
prob_a <- dpois(k_a, lambda_a)

cat("a) P(X = 3 pacientes en 1 hora) [λ = 2.5]:\n")
cat("   Probabilidad =", round(prob_a, 6), "\n\n")

lambda_b <- lambda_hora * 2
k_b <- 0
prob_b <- dpois(k_b, lambda_b)

cat("b) P(Y = 0 pacientes en 2 horas) [λ =", lambda_b, "]:\n")
cat("   Probabilidad =", round(prob_b, 6), "\n\n")

lambda_c <- lambda_hora * 4
capacidad_c <- 8
# P(Z > 8) = 1 - P(Z <= 8)
prob_c <- 1 - ppois(capacidad_c, lambda_c)

cat("c) P(Z > 8 pacientes en 4 horas) [λ =", lambda_c, "]:\n")
cat("   Probabilidad de superar la capacidad =", round(prob_c, 6), "\n\n")

lambda_d <- lambda_c
prob_acumulada_requerida <- 0.90

capacidad_minima_d <- qpois(prob_acumulada_requerida, lambda_d)

if (ppois(capacidad_minima_d, lambda_d) <= prob_acumulada_requerida) {
  capacidad_minima_d <- capacidad_minima_d + 1
}

prob_saturacion_k13 <- 1 - ppois(13, lambda_d)
prob_saturacion_k14 <- 1 - ppois(14, lambda_d)


cat("d) Capacidad mínima k para que P(Z > k) < 0.10 en 4 horas [λ =", lambda_d, "]:\n")
cat("   Buscamos el menor k tal que P(Z <= k) > 0.90.\n")
cat("   P(Z <= 13) =", round(ppois(13, lambda_d), 4), " (No es suficiente)\n")
cat("   P(Z <= 14) =", round(ppois(14, lambda_d), 4), " (Es suficiente)\n\n")
cat("   Probabilidad de saturación con capacidad 13: P(Z > 13) =", round(prob_saturacion_k13, 4), "(> 10%)\n")
cat("   Probabilidad de saturación con capacidad 14: P(Z > 14) =", round(prob_saturacion_k14, 4), "(< 10%)\n\n")
cat("   Capacidad mínima requerida:", capacidad_minima_d, "pacientes\n")

```

:::

::: {#exr-tcl_poisson}
Implementa una verificación completa del Teorema Central del Límite para una distribución Poisson con $\lambda = 7$.

```{r}
library(ggplot2)
library(dplyr)
library(knitr)
library(patchwork)

lambda_original <- 7
tamanos_muestra <- c(5, 10, 30, 50, 100) 
num_muestras <- 5000 

set.seed(123) 

cat("--- Verificación del Teorema Central del Límite ---\n")
cat("Distribución Original: Poisson(λ =", lambda_original, ")\n")
cat("Media Teórica (μ):", lambda_original, "\n")
cat("Varianza Teórica (σ²):", lambda_original, "\n\n")

lista_de_medias <- list()

for (n in tamanos_muestra) {
  medias <- replicate(num_muestras, {
    muestra <- rpois(n, lambda_original)
    mean(muestra)
  })
  
  lista_de_medias[[paste("n =", n)]] <- medias
}


estadisticas_tcl <- data.frame(
  n = tamanos_muestra,
  Media_Observada = sapply(lista_de_medias, mean),
  Media_Teorica = rep(lambda_original, length(tamanos_muestra)),
  Varianza_Observada = sapply(lista_de_medias, var),
  Varianza_Teorica = lambda_original / tamanos_muestra
)

cat("--- Tabla de Comparación de Estadísticas ---\n")
print(kable(estadisticas_tcl, digits = 4,
            caption = "Convergencia de la Media y Varianza Muestral"))

data_grafico <- do.call(rbind, lapply(names(lista_de_medias), function(nombre) {
  data.frame(
    media_muestral = lista_de_medias[[nombre]],
    n_label = nombre
  )
}))

data_grafico$n_label <- factor(data_grafico$n_label, levels = paste("n =", tamanos_muestra))

plot_tcl <- ggplot(data_grafico, aes(x = media_muestral)) +
  
  geom_histogram(aes(y = after_stat(density)), bins = 40, fill = "navy", 
                 color = "white", alpha = 0.8) +
 
  stat_function(
    fun = function(x, n) { dnorm(x, mean = lambda_original, sd = sqrt(lambda_original / n)) },
    args = list(n = tamanos_muestra[1]),
    color = "red", 
    linewidth = 1.2,
    linetype = "dashed"
  ) +
  
  facet_wrap(~n_label, scales = "free") +
  
  labs(
    title = "Verificación del Teorema Central del Límite con Distribución de Poisson",
    subtitle = paste("Distribución original: Poisson(λ = 7). Curva roja: Aproximación Normal Teórica."),
    x = "Media Muestral (x̄)",
    y = "Densidad"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))

print(plot_tcl)

```

:::

::: {#exr-prop_aditiva}
Verifica por simulación que si $X_1 \sim \text{Poisson}(3.5)$ y $X_2 \sim \text{Poisson}(2.8)$ son independientes, entonces $X_1 + X_2 \sim \text{Poisson}(6.3)$.

**Pasos específicos:**

a)  Generar 10,000 muestras de cada distribución y calcule su suma
b)  Comparar las estadísticas de la suma con una Poisson(6.3) directa
c)  Extienda la verificación a la suma de 4 variables Poisson independientes

```{r}
library(ggplot2)
library(dplyr)
library(knitr)
library(patchwork)

cat("--- Verificación para la Suma de Dos Variables Poisson ---\n\n")

lambda1 <- 3.5
lambda2 <- 2.8
lambda_suma_teorica <- lambda1 + lambda2
n_sim <- 10000

set.seed(42)

X1_simulada <- rpois(n_sim, lambda1)
X2_simulada <- rpois(n_sim, lambda2)
suma_X1_X2 <- X1_simulada + X2_simulada

cat("Paso a) Se han generado 10,000 muestras para X1 ~ Poisson(3.5) y X2 ~ Poisson(2.8).\n")
cat("La suma (X1 + X2) ha sido calculada para cada una de las 10,000 simulaciones.\n\n")

Y_directa <- rpois(n_sim, lambda_suma_teorica)

stats_comparacion_2var <- data.frame(
  Estadística = c("Media", "Varianza"),
  Suma_Simulada_X1_X2 = c(mean(suma_X1_X2), var(suma_X1_X2)),
  Poisson_Directa_Y = c(mean(Y_directa), var(Y_directa)),
  Valor_Teorico = c(lambda_suma_teorica, lambda_suma_teorica)
)

cat("Paso b) Comparación de Estadísticas:\n")
print(kable(stats_comparacion_2var, digits = 4, 
            caption = "Comparación: Suma Simulada vs. Poisson Directa vs. Teórica"))

data_grafico_2var <- data.frame(
  valores = c(suma_X1_X2, Y_directa),
  metodo = rep(c("Suma de X1 + X2", "Poisson Directa (λ=6.3)"), each = n_sim)
)

plot1 <- ggplot(data_grafico_2var, aes(x = valores, fill = metodo)) +
  geom_histogram(alpha = 0.7, binwidth = 1, position = "dodge") +
  labs(
    title = "Comparación Visual: Suma de Dos Poisson",
    subtitle = "La distribución de la suma es indistinguible de una Poisson directa.",
    x = "Número de Eventos (k)",
    y = "Frecuencia",
    fill = "Método de Simulación"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("cyan4", "deeppink")) +
  theme(legend.position = "top")


cat("\n\n--- c) Extensión para la Suma de Cuatro Variables Poisson ---\n\n")

lambdas_multi <- c(1.2, 2.0, 0.8, 1.5)
lambda_total_teorico <- sum(lambdas_multi)

suma_multi <- replicate(n_sim, {
  sum(rpois(4, lambdas_multi))
})


Y_multi_directa <- rpois(n_sim, lambda_total_teorico)

stats_comparacion_4var <- data.frame(
  Estadística = c("Media", "Varianza"),
  Suma_Simulada_4_Vars = c(mean(suma_multi), var(suma_multi)),
  Poisson_Directa_Y = c(mean(Y_multi_directa), var(Y_multi_directa)),
  Valor_Teorico = c(lambda_total_teorico, lambda_total_teorico)
)

cat("Comparación de Estadísticas para 4 variables:\n")
print(kable(stats_comparacion_4var, digits = 4, 
            caption = "Comparación: Suma de 4 Poisson vs. Poisson Directa vs. Teórica"))

data_grafico_4var <- data.frame(
  valores = c(suma_multi, Y_multi_directa),
  metodo = rep(c("Suma de 4 Poisson", "Poisson Directa (λ=5.5)"), each = n_sim)
)

plot2 <- ggplot(data_grafico_4var, aes(x = valores, fill = metodo)) +
  geom_histogram(alpha = 0.7, binwidth = 1, position = "dodge") +
  labs(
    title = "Comparación Visual: Suma de Cuatro Poisson",
    subtitle = paste("λ_total =", lambda_total_teorico),
    x = "Número de Eventos (k)",
    y = "Frecuencia",
    fill = "Método de Simulación"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("cyan4", "deeppink")) +
  theme(legend.position = "top")

print(plot1 / plot2)

```

:::

::: {#exr-aplicacion_web}
Un sitio web recibe en promedio 15 visitantes por minuto durante las horas pico. El servidor puede manejar hasta 25 solicitudes simultáneas sin degradación del rendimiento.

**Análisis requerido:**

a)  ¿Cuál es la probabilidad de que en un minuto el servidor experimente degradación?

b)  Si se duplica la capacidad del servidor (50 solicitudes), ¿cómo cambia la probabilidad de degradación?

c)  ¿Cuál sería la capacidad óptima del servidor para que la probabilidad de degradación sea menor al 1%?

d)  Simule el comportamiento del servidor durante una hora (60 minutos) y calcule el porcentaje de tiempo con degradación.

```{r}
lambda_base <- 15 
capacidad_original <- 25 

cat("--- Análisis de Tráfico de Sitio Web - Distribución de Poisson ---\n")
cat("Tasa base: λ =", lambda_base, "visitantes por minuto\n")
cat("Capacidad del servidor:", capacidad_original, "solicitudes\n\n")

prob_degradacion_a <- 1 - ppois(capacidad_original, lambda = lambda_base)

cat("a) Probabilidad de degradación (P(X > 25)):\n")
cat("   Probabilidad =", round(prob_degradacion_a, 6), "(", round(prob_degradacion_a * 100, 4), "%)\n\n")

capacidad_duplicada <- 50
prob_degradacion_b <- 1 - ppois(capacidad_duplicada, lambda = lambda_base)

cat("b) Probabilidad de degradación con capacidad duplicada (P(X > 50)):\n")
cat("   Probabilidad =", prob_degradacion_b, "(prácticamente cero)\n\n")

prob_acumulada_requerida <- 0.99

capacidad_optima_c <- qpois(prob_acumulada_requerida, lambda = lambda_base)

prob_con_k_menos_1 <- 1 - ppois(capacidad_optima_c - 1, lambda = lambda_base)
prob_con_k <- 1 - ppois(capacidad_optima_c, lambda = lambda_base)

cat("c) Capacidad óptima para que P(degradación) < 1%:\n")
cat("   Se requiere que P(X <= k) > 0.99.\n")
cat("   El valor k que cumple esto es:", capacidad_optima_c, "\n")
cat("   Verificación:\n")
cat("   - Con capacidad k =", capacidad_optima_c - 1, ", P(degradación) =", round(prob_con_k_menos_1, 4), "(No cumple)\n")
cat("   - Con capacidad k =", capacidad_optima_c, ", P(degradación) =", round(prob_con_k, 4), "(Sí cumple)\n")
cat("   Por lo tanto, la capacidad óptima es", capacidad_optima_c, ".\n\n")

set.seed(42) 
num_minutos_sim <- 60

simulacion_hora <- rpois(num_minutos_sim, lambda = lambda_base)

minutos_con_degradacion <- sum(simulacion_hora > capacidad_original)

porcentaje_degradacion <- (minutos_con_degradacion / num_minutos_sim) * 100

cat("d) Simulación de una hora (60 minutos):\n")
cat("   Visitantes simulados por minuto:\n")
print(simulacion_hora)
cat("\n")
cat("   Número de minutos con más de 25 visitantes:", minutos_con_degradacion, "\n")
cat("   Porcentaje de tiempo con degradación en esta simulación:", porcentaje_degradacion, "%\n")

```


:::

::: {#exr-inventarios}
Una tienda registra que el número de cierto producto vendido por día sigue una distribución Poisson con $\lambda = 8$.

**Problemas de optimización:**

a)  Si la tienda mantiene un inventario de 12 unidades al inicio del día, ¿cuál es la probabilidad de quedarse sin existencias?

b)  ¿Cuántas unidades debe tener para que la probabilidad de agotarse sea menor al 5%?

c)  Calcule el costo esperado diario si:

    -   Cada unidad no vendida cuesta \$2 mantenerla en inventario
    -   Cada venta perdida por falta de stock cuesta \$15
    -   El costo de adquisición es \$10 por unidad

d)  Determine el nivel óptimo de inventario que minimiza el costo total esperado.

```{r}
lambda_ventas <- 8 
costo_mantenimiento <- 2 
costo_agotamiento <- 15
costo_adquisicion <- 10

cat("--- Optimización de Inventarios con Distribución de Poisson ---\n")
cat("Demanda diaria ~ Poisson(λ =", lambda_ventas, ")\n\n")


inventario_a <- 12
prob_agotamiento_a <- 1 - ppois(inventario_a, lambda = lambda_ventas)

cat("a) Probabilidad de agotarse con 12 unidades (P(X > 12)):\n")
cat("   Probabilidad =", round(prob_agotamiento_a, 6), "(", round(prob_agotamiento_a * 100, 2), "%)\n\n")

prob_acumulada_requerida <- 0.95
inventario_b <- qpois(prob_acumulada_requerida, lambda = lambda_ventas)

if (ppois(inventario_b, lambda = lambda_ventas) <= prob_acumulada_requerida) {
  inventario_b <- inventario_b + 1
}

cat("b) Inventario k para que P(X > k) < 5%:\n")
cat("   Se requiere P(X <= k) > 0.95.\n")
cat("   El nivel de inventario mínimo es:", inventario_b, "unidades.\n")
cat("   Verificación: P(X >", inventario_b, ") =", 
    round(1 - ppois(inventario_b, lambda = lambda_ventas), 4), "\n\n")


calcular_costo_total_esperado <- function(k, lambda, ch, cs, ca) {
  
  x_vals <- 0:100 
  probs <- dpois(x_vals, lambda)

  costo_adq <- k * ca
  
  unidades_no_vendidas <- pmax(0, k - x_vals)
  costo_mant_esperado <- ch * sum(unidades_no_vendidas * probs)
  
  ventas_perdidas <- pmax(0, x_vals - k)
  costo_agot_esperado <- cs * sum(ventas_perdidas * probs)

  return(costo_adq + costo_mant_esperado + costo_agot_esperado)
}

niveles_inventario <- 0:25

costos_esperados <- sapply(niveles_inventario, function(k) {
  calcular_costo_total_esperado(k, lambda_ventas, costo_mantenimiento, costo_agotamiento, costo_adquisicion)
})

resultados_optimizacion <- data.frame(
  Inventario_k = niveles_inventario,
  Costo_Total_Esperado = costos_esperados
)

nivel_optimo <- resultados_optimizacion$Inventario_k[which.min(resultados_optimizacion$Costo_Total_Esperado)]
costo_minimo <- min(resultados_optimizacion$Costo_Total_Esperado)

cat("d) Nivel Óptimo de Inventario:\n")
cat("   El nivel de inventario que minimiza el costo total esperado es:", nivel_optimo, "unidades.\n")
cat("   El costo total esperado mínimo es: $", round(costo_minimo, 2), "\n\n")

library(ggplot2)

plot_costos <- ggplot(resultados_optimizacion, aes(x = Inventario_k, y = Costo_Total_Esperado)) +
  geom_line(color = "navy", linewidth = 1.2) +
  geom_point(color = "navy", size = 2) +
  geom_point(data = filter(resultados_optimizacion, Inventario_k == nivel_optimo),
             aes(x = Inventario_k, y = Costo_Total_Esperado),
             color = "deeppink", size = 5, shape = 18) +
 
  labs(
    title = "Optimización del Nivel de Inventario",
    subtitle = "Costo Total Esperado vs. Unidades en Inventario",
    x = "Nivel de Inventario (k)",
    y = "Costo Total Esperado Diario ($)"
  ) +
  scale_x_continuous(breaks = seq(0, max(niveles_inventario), by = 2)) +
  theme_minimal()

print(plot_costos)

```


:::
