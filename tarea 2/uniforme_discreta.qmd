---
title: "Distribución Uniforme Discreta"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(kableExtra)
library(gridExtra)
```

<br>

La **distribución uniforme discreta** es una de las distribuciones de probabilidad más elementales. Se caracteriza porque todos los valores posibles de la variable aleatoria tienen la misma probabilidad de ocurrir.

::: {#def-vaunif}
Una variable aleatoria discreta $X$ sigue una distribución uniforme discreta en el conjunto de $n$ números $\{x_1, x_2, \ldots, x_n\}$ si:

\begin{equation}
f(x) =  \begin{cases} 
\frac{1}{n} & \text{si } x \in \{x_1, x_2, \ldots, x_n\} \\
0 & \text{en otro caso}
\end{cases}
\end{equation}

Para denotar que una variable aleatoria $X$ tiene distribución uniforme escribimos:

\begin{equation}
X \sim \text{unif} \{x_1, x_2, \ldots, x_n\}
\end{equation}
:::

## Características Principales

**Función de Probabilidad**

\begin{equation}
f(x) = P(X = x) = \begin{cases} 
\frac{1}{n} & \text{si } x \in \{x_1, x_2, \ldots, x_n\} \\
0 & \text{en otro caso}
\end{cases}
\end{equation}

**Función de Distribución (Probabilidad Acumulada)**

Suponiendo que los valores $x_1, x_2, \ldots, x_n$ son $n$ enteros consecutivos, tenemos:

\begin{equation}
F(x) = P(X \leq x) = \begin{cases}
0 & \text{si } x < x_1 \\
\frac{\lfloor x \rfloor - x_1 + 1}{x_n-x_1+1} & \text{si } x_1 \leq x \leq x_n \\
1 & \text{si } x > x_n
\end{cases}
\end{equation}

**Parámetros Estadísticos**

Esperanza (Media):

\begin{equation}
E(X) = \frac{1}{n}\sum_{i=1}^n x_i = \mu
\end{equation}

Varianza:

\begin{equation}
\text{Var}(X) = \frac{1}{n}\sum_{i=1}^n (x_i-\mu)^2
\end{equation}

## Ejemplos y Aplicaciones

::: {#exm-dado}
### Lanzamiento de un dado

Un dado justo representa una distribución $X\sim \text{unif} \{1, 2, 3, 4, 5, 6\}$.

```{r}
#| code-fold: true
#| label: dado-ejemplo

# Parámetros del dado
x_1 <- 1
x_6 <- 6
valores <- x_1:x_6
probabilidades <- rep(1/length(valores), length(valores))

# Crear data frame
dado_data <- data.frame(
  Valor = valores,
  Probabilidad = probabilidades
)

# Mostrar tabla
kable(dado_data, 
      caption = "Distribución de probabilidad de un dado",
      align = "cc") %>%
  kable_styling(bootstrap_options = "striped")
```

**Cálculo de parámetros:**

```{r}
#| code-fold: true
#| label: parametros-dado
# Media
media <- sum(dado_data$Valor)/length(dado_data$Valor)
cat("Media:", media, "\n")

# Varianza
varianza <- sum((dado_data$Valor- media)^2)/length(dado_data$Valor)
cat("Varianza:", varianza, "\n")

# Desviación estándar
desv_std <- sqrt(varianza)
cat("Desviación estándar:", round(desv_std, 4), "\n")
```

### Visualización

```{r}
#| code-fold: true
#| label: grafico-dado
#| fig-cap: "Función de probabilidad de un dado"

ggplot(dado_data, aes(x = Valor, y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.6) +
  geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5) +
  scale_x_continuous(breaks = valores) +
  scale_y_continuous(limits = c(0, 0.20)) +
  labs(title = "Distribución Uniforme Discreta - Dado",
       x = "Valor",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

::: {#exm-num_random}
### Selección aleatoria de números

Supongamos que seleccionamos aleatoriamente un número entero entre 10 y 20 (inclusive).

**Cálculo de parámetros:**

```{r}
#| code-fold: true
#| label: ejemplo-numeros

x2_1 <- 10
x2_n <- 20
valores2 <- x2_1:x2_n
probabilidades2 <- rep(1/(length(valores2)), length(valores2))

# Data_frame
data2 <- data.frame(
  Valor = valores2,
  Probabilidad = probabilidades2
)

# Parámetros estadísticos
media2 <- mean(data2$Valor)
varianza2 <- sum((data2$Valor - media2)^2)/length(data2$Valor)
desv_std2 <- sqrt(varianza2)

cat("Media:", media2, "\n")
cat("Varianza:", round(varianza2, 4), "\n")
cat("Desviación estándar:", round(desv_std2, 4), "\n")
```

**Visualización de la función de probabilidad:**

```{r}
#| label: grafico-numeros
#| fig-cap: "Distribución uniforme discreta entre 10 y 20"


ggplot(data2, aes(x = Valor, y = Probabilidad)) +
  geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), 
            vjust = -0.5, size = 3) +
  scale_x_continuous(breaks = seq(10, 20, 1)) +
  labs(title = "Distribución Uniforme Discreta",
       x = "Valor",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

::: {#exm-simulacion}
### Simulación en R

Generación de números aleatorios de una variable aleatoria $X\sim unif\{1, 2, 3, 4, 5, 6\}$ y comparación con las probabilidades teóricas.

```{r}
#| code-fold: true
#| label: simulacion

# Generar 1000 números aleatorios
set.seed(123)
n_sim <- 1000
muestra <- sample(1:6, n_sim, replace = TRUE)

# Frecuencias observadas
freq_obs <- table(muestra)
freq_rel <- prop.table(freq_obs)

# Comparar con probabilidades teóricas
comparacion <- data.frame(
  Valor = 1:6,
  Prob_Teorica = rep(1/6, 6),
  Freq_Observada = as.numeric(freq_rel)
)

kable(comparacion, 
      caption = "Comparación entre probabilidades teóricas y observadas",
      col.names = c("Valor", "Prob. Teórica", "Freq. Observada"),
      digits = 4) |> 
  kable_styling(bootstrap_options = "striped")
```

<br>

**Visualización de la simulación**

```{r}
#| code-fold: true
#| label: grafico-simulacion
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Comparación entre distribución teórica y simulada"


# Preparar datos para el gráfico
comp_long <- comparacion |> 
  pivot_longer(cols = c(Prob_Teorica, Freq_Observada),
               names_to = "Tipo",
               values_to = "Probabilidad") |> 
  mutate(Tipo = case_when(
    Tipo == "Prob_Teorica" ~ "Teórica",
    Tipo == "Freq_Observada" ~ "Observada"
  ))

ggplot(comp_long, aes(x = Valor, y = Probabilidad, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.7) +
  scale_x_continuous(breaks = 1:6) +
  scale_fill_manual(values = c("Teórica" = "blue", "Observada" = "red")) +
  labs(title = paste("Simulación con", n_sim, "observaciones"),
       x = "Valor",
       y = "Probabilidad",
       fill = "Distribución") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
```
:::

## Aplicaciones Prácticas

La distribución uniforme discreta tiene múltiples aplicaciones:

1.  **Juegos de azar**: Dados, ruletas, sorteos
2.  **Muestreo**: Selección aleatoria de elementos
3.  **Simulación**: Generación de números aleatorios equiprobables
4.  **Investigación**: Asignación aleatoria de tratamientos

## Propiedades Importantes

### Relación con otras distribuciones

-   Caso especial de la distribución categórica con probabilidades iguales
-   Límite discreto de la distribución uniforme continua
-   Base para generar otras distribuciones discretas

### Teorema Central del Límite

Verifiquemos el Teorema Central del Límite mediante simulación para el caso de variables aleatorias con distribución uniforme discreta. 

Generaremos $k=1000$ muestras cada una de tamaño $n=30$ de una distribución uniforme discreta en el conjunto $\{1, 2, 3, 4, 5, 6\}$ y observaremos la distribución de sus medias muestrales. En el @exm-dado se obtuvo que para $X\sim \text{unif}\{1, 2, 3, 4, 5, 6\}$ tenemos $\mu=7/2$ y $\sigma^2= 35/12$, luego la media muestral:

$$\bar{X}_{30}=\frac{1}{30}\sum_{i=1}^{30} X_i$$
Tendrá aproximadamente la siguiente distribución:

$$\bar{X}_n \sim N\left(\mu, \frac{\sigma^2}{n} \right)$$

Es decir

$$\bar{X}_{30} \sim N\left(\frac{7}{2}, \frac{7}{72} \right)$$



```{r}
#| code-fold: true
#| label: limite-central
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Verificación del Teorema del Límite Central"
# Simular medias muestrales
set.seed(456)
k_muestra <- 1000
n_muestra <- 30

medias_muestrales <- replicate(k_muestra, {
  muestra <- sample(1:6, n_muestra, replace = TRUE)
  mean(muestra)
})

# Crear histograma
hist_data <- data.frame(Medias = medias_muestrales)

ggplot(hist_data) +
  geom_histogram(aes(x=Medias, after_stat(density)), bins = 30, 
                 fill = "lightblue", alpha = 0.7, color = "black") +
  geom_density(aes(x = Medias), color = "red", linewidth = 1) +
  geom_vline(xintercept = mean(medias_muestrales), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribución de Medias Muestrales",
       subtitle = paste("n =", n_muestra, " de una v.a. uniforme(1,6)"),
       x = "Media Muestral",
       y = "Densidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))

# Estadísticas
cat("Media teórica:", (1+6)/2, "\n")
cat("Media observada:", round(mean(medias_muestrales), 4), "\n")
cat("Varianza teórica de la media:", round(((6-1+1)^2-1)/12/n_muestra, 4), "\n")
cat("Varianza observada de la media:", round(var(medias_muestrales), 4), "\n")
```

## Ejercicios Propuestos

::: {#exr-muestras}
Una urna contiene 8 bolas numeradas del 1 al 8. Se extrae una bola al azar. Calcule la probabilidad de obtener un número par.

```{r}
espacio_muestral <- 1:8
n_total <- length(espacio_muestral)

cat("Espacio Muestral (S):", espacio_muestral, "\n")
cat("Número total de casos posibles n(S):", n_total, "\n\n")

evento_par <- espacio_muestral[espacio_muestral %% 2 == 0]
n_favorables <- length(evento_par)

cat("Evento A (Obtener un número par):", evento_par, "\n")
cat("Número de casos favorables n(A):", n_favorables, "\n\n")

probabilidad_par <- n_favorables / n_total

cat("Cálculo de la Probabilidad\n")
cat("P(A) = n(A) / n(S) =", n_favorables, "/", n_total, "\n")
cat("La probabilidad de obtener un número par es:", probabilidad_par, "\n")
```
:::

::: {#exr-enteros}
En un juego, se selecciona aleatoriamente un número entero entre 5 y 15 (inclusive). Calcule la media y la varianza de esta distribución.

```{r}
inicio <- 5
fin <- 15
valores <- inicio:fin
n <- length(valores)

cat("Parámetros de la Distribución Uniforme Discret\n")
cat("Conjunto de valores:", valores, "\n")
cat("Número total de valores (n):", n, "\n\n")

media_formula <- (inicio + fin) / 2

media_vector <- mean(valores)

cat("Media (Valor Esperado)\n")
cat("Calculada con la fórmula (a+b)/2:", media_formula, "\n")
cat("Calculada con la función mean() de R:", media_vector, "\n\n")

varianza_formula <- (n^2 - 1) / 12

varianza_vector <- sum((valores - media_vector)^2) / n

cat("Varianza\n")
cat("Calculada con la fórmula (n^2-1)/12:", varianza_formula, "\n")
cat("Calculada con la definición de varianza poblacional:", round(varianza_vector, 4), "\n")

desviacion_estandar <- sqrt(varianza_formula)
cat("Desviación Estándar (sqrt(varianza)):", round(desviacion_estandar, 4), "\n")

```


:::

::: {#exr-simulacion_4}
Simule 500 observaciones de una distribución uniforme discreta en {0, 1, 2, 3, 4} y compare las frecuencias observadas con las teóricas.

```{r}
set.seed(42) 
valores_posibles <- 0:4
n_simulaciones <- 500
n_valores <- length(valores_posibles)

cat("Parámetros de la Simulación\n")
cat("Valores:", valores_posibles, "\n")
cat("Número de simulaciones (N):", n_simulaciones, "\n\n")

prob_teorica <- 1 / n_valores
frec_teorica_esperada <- prob_teorica * n_simulaciones

cat("Expectativas Teóricas\n")
cat("Probabilidad teórica por valor:", prob_teorica, "\n")
cat("Frecuencia teórica esperada por valor:", frec_teorica_esperada, "\n\n")

observaciones <- sample(valores_posibles, n_simulaciones, replace = TRUE)

frec_observada <- table(factor(observaciones, levels = valores_posibles))

comparacion_df <- data.frame(
  Valor = valores_posibles,
  Frec_Esperada = frec_teorica_esperada,
  Frec_Observada = as.numeric(frec_observada),
  Diferencia = as.numeric(frec_observada) - frec_teorica_esperada
)

cat(" Tabla Comparativa: Frecuencias Teóricas vs. Observadas \n")
print(knitr::kable(comparacion_df, 
                   caption = "Comparación de Frecuencias (N=500)",
                   digits = 0) %>% 
        knitr::kable(bootstrap_options = "striped"))

library(ggplot2)
library(tidyr)

df_long <- data.frame(
  Valor = valores_posibles,
  Esperada = frec_teorica_esperada,
  Observada = as.numeric(frec_observada)
) %>%
  pivot_longer(cols = c("Esperada", "Observada"), 
               names_to = "Tipo", 
               values_to = "Frecuencia")

plot_simulacion <- ggplot(df_long, aes(x = factor(Valor), y = Frecuencia, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.8, color = "black") +
  scale_fill_manual(values = c("Esperada" = "green", "Observada" = "lightblue")) +
  labs(
    title = "Comparación de Frecuencias: Teórica vs. Observada",
    subtitle = paste("Simulación de", n_simulaciones, "observaciones de unif{0, 1, 2, 3, 4}"),
    x = "Valor Observado",
    y = "Frecuencia",
    fill = "Tipo de Frecuencia"
  ) +
  geom_text(aes(label = Frecuencia), vjust = -0.5, position = position_dodge(0.9), size = 3.5) +
  theme_minimal() +
  theme(legend.position = "bottom")

print(plot_simulacion)

```

:::
